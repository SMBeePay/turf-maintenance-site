---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
  priority?: boolean;
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  loading = 'lazy',
  class: className = '',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  priority = false
} = Astro.props;

// Generate responsive image sizes
const generateSrcSet = (baseSrc: string, format: string = 'webp') => {
  const widths = [320, 640, 768, 1024, 1280, 1920];
  return widths
    .map(w => `${baseSrc}?w=${w}&f=${format} ${w}w`)
    .join(', ');
};

const webpSrcSet = generateSrcSet(src, 'webp');
const fallbackSrcSet = generateSrcSet(src, 'jpg');
---

<picture class={`optimized-image ${className}`}>
  <!-- WebP format for modern browsers -->
  <source
    srcset={webpSrcSet}
    sizes={sizes}
    type="image/webp"
  />
  
  <!-- Fallback for older browsers -->
  <source
    srcset={fallbackSrcSet}
    sizes={sizes}
    type="image/jpeg"
  />
  
  <!-- Main image element -->
  <img
    src={`${src}?w=${width}&f=jpg`}
    alt={alt}
    width={width}
    height={height}
    loading={priority ? 'eager' : loading}
    decoding={priority ? 'sync' : 'async'}
    class={className}
    style={`
      aspect-ratio: ${width}/${height};
      object-fit: cover;
      width: 100%;
      height: auto;
    `}
  />
</picture>

<style>
  .optimized-image {
    display: block;
    overflow: hidden;
  }
  
  .optimized-image img {
    transition: transform 0.3s ease;
    will-change: transform;
  }
  
  .optimized-image:hover img {
    transform: scale(1.02);
  }
  
  /* Placeholder while loading */
  .optimized-image img[loading="lazy"] {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
  
  /* Remove loading animation once image loads */
  .optimized-image img[loading="lazy"]:not([data-loaded]) {
    background: #f5f5f5;
    animation: none;
  }
</style>

<script>
  // Intersection Observer for lazy loading
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          img.setAttribute('data-loaded', 'true');
          imageObserver.unobserve(img);
        }
      });
    });
    
    document.querySelectorAll('img[loading="lazy"]').forEach(img => {
      imageObserver.observe(img);
    });
  }
</script>